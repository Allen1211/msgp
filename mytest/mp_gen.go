package mytest

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/Allen1211/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BaseArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BaseArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Seq")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BaseArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Seq)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BaseArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BaseArgs) Msgsize() (s int) {
	s = 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GroupInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "IsLeader":
			z.IsLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = GroupStatus(zb0002)
			}
		case "Shards":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int]ShardInfo, zb0003)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 int
				var za0002 ShardInfo
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Peer":
			z.Peer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GroupInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Id"
	err = en.Append(0x87, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "IsLeader"
	err = en.Append(0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLeader)
	if err != nil {
		err = msgp.WrapError(err, "IsLeader")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001, za0002 := range z.Shards {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Shards")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Peer)
	if err != nil {
		err = msgp.WrapError(err, "Peer")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GroupInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Id"
	o = append(o, 0x87, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "IsLeader"
	o = append(o, 0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsLeader)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Shards)))
	for za0001, za0002 := range z.Shards {
		o = msgp.AppendInt(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Peer)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GroupInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "IsLeader":
			z.IsLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = GroupStatus(zb0002)
			}
		case "Shards":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int]ShardInfo, zb0003)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0003 > 0 {
				var za0001 int
				var za0002 ShardInfo
				zb0003--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Peer":
			z.Peer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GroupInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 8 + msgp.IntSize + 9 + msgp.BoolSize + 7 + msgp.IntSize + 7 + msgp.MapHeaderSize
	if z.Shards != nil {
		for _, za0002 := range z.Shards {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize + za0002.Msgsize()
		}
	}
	s += 5 + msgp.Int64Size + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GroupStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = GroupStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GroupStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GroupStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GroupStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = GroupStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GroupStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HeartbeatArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "NodeId":
			z.NodeId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Groups":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int]*GroupInfo, zb0003)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 int
				var za0002 *GroupInfo
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(GroupInfo)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0001)
						return
					}
				}
				z.Groups[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HeartbeatArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "BaseArgs"
	err = en.Append(0x84, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Seq")
		return
	}
	// write "NodeId"
	err = en.Append(0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "NodeId")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Groups)))
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	for za0001, za0002 := range z.Groups {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Groups")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HeartbeatArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "BaseArgs"
	o = append(o, 0x84, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.BaseArgs.Seq)
	// string "NodeId"
	o = append(o, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.NodeId)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Groups)))
	for za0001, za0002 := range z.Groups {
		o = msgp.AppendInt(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeartbeatArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "NodeId":
			z.NodeId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Groups":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int]*GroupInfo, zb0003)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0003 > 0 {
				var za0001 int
				var za0002 *GroupInfo
				zb0003--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(GroupInfo)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0001)
						return
					}
				}
				z.Groups[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HeartbeatArgs) Msgsize() (s int) {
	s = 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 7 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr) + 7 + msgp.MapHeaderSize
	if z.Groups != nil {
		for _, za0002 := range z.Groups {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShardInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Gid":
			z.Gid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ShardStatus(zb0002)
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Capacity":
			z.Capacity, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "RangeStart":
			z.RangeStart, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RangeStart")
				return
			}
		case "RangeEnd":
			z.RangeEnd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RangeEnd")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShardInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Id"
	err = en.Append(0x87, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Gid"
	err = en.Append(0xa3, 0x47, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Gid)
	if err != nil {
		err = msgp.WrapError(err, "Gid")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Capacity"
	err = en.Append(0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Capacity)
	if err != nil {
		err = msgp.WrapError(err, "Capacity")
		return
	}
	// write "RangeStart"
	err = en.Append(0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.RangeStart)
	if err != nil {
		err = msgp.WrapError(err, "RangeStart")
		return
	}
	// write "RangeEnd"
	err = en.Append(0xa8, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.RangeEnd)
	if err != nil {
		err = msgp.WrapError(err, "RangeEnd")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShardInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Id"
	o = append(o, 0x87, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Gid"
	o = append(o, 0xa3, 0x47, 0x69, 0x64)
	o = msgp.AppendInt(o, z.Gid)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "Capacity"
	o = append(o, 0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	o = msgp.AppendUint64(o, z.Capacity)
	// string "RangeStart"
	o = append(o, 0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendString(o, z.RangeStart)
	// string "RangeEnd"
	o = append(o, 0xa8, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64)
	o = msgp.AppendString(o, z.RangeEnd)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShardInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Gid":
			z.Gid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ShardStatus(zb0002)
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Capacity":
			z.Capacity, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "RangeStart":
			z.RangeStart, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RangeStart")
				return
			}
		case "RangeEnd":
			z.RangeEnd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RangeEnd")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShardInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 4 + msgp.IntSize + 7 + msgp.IntSize + 5 + msgp.Int64Size + 9 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len(z.RangeStart) + 9 + msgp.StringPrefixSize + len(z.RangeEnd)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShardStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ShardStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ShardStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ShardStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShardStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ShardStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ShardStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
